// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  nom          String
  prenom       String
  role         String   @default("GESTIONNAIRE")
  structure    String?  // Structure/département
  typeCollab   String?  // Type de collaborateur
  telephone    String?
  adresse      String?
  ville        String?
  codePostal   String?
  dateEmbauche DateTime?
  statut       String   @default("ACTIF")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Proprietaire {
  id          String   @id @default(cuid())
  type        String   @default("PHYSIQUE")
  nom         String
  prenom      String
  email       String
  telephone   String?
  adresse     String
  ville       String
  codePostal  String
  entreprise  String?
  siret       String?
  signature   String?  // Chemin vers l'image de signature
  numeroRIB   String?  // Numéro de RIB du propriétaire
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  biens       BienProprietaire[]

  @@map("proprietaires")
}

model Bien {
  id            String   @id @default(cuid())
  adresse       String
  ville         String
  codePostal    String
  type          String   @default("APPARTEMENT")
  surface       Float
  nbPieces      Int      @default(1)
  nbChambres    Int      @default(0)
  loyer         Float
  chargesMensuelles Float @default(0)
  depotGarantie Float    @default(0)
  statut        String   @default("VACANT")
  description   String?
  reglementInterieur String? // Règlement intérieur (passage poubelles, stationnement, etc.)
  photos        String?  // JSON string (legacy - à migrer vers Document)
  documents     String?  // JSON string (legacy - à migrer vers Document)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  proprietaires BienProprietaire[]
  contrats      Contrat[]
  charges       Charge[]
  lots          Lot[]
  documentsFiles Document[] @relation("BienDocuments")
  prets         PretImmobilier[]

  @@map("biens")
}

model BienProprietaire {
  id            String @id @default(cuid())
  bienId        String
  proprietaireId String
  quotePart     Float  @default(100)

  // Relations
  bien          Bien        @relation(fields: [bienId], references: [id], onDelete: Cascade)
  proprietaire  Proprietaire @relation(fields: [proprietaireId], references: [id], onDelete: Cascade)

  @@unique([bienId, proprietaireId])
  @@map("bien_proprietaires")
}

model Locataire {
  id           String    @id @default(cuid())
  civilite     String    @default("M")
  nom          String
  prenom       String
  email        String
  telephone    String
  adresse      String?
  ville        String?
  codePostal   String?
  dateNaissance DateTime?
  profession   String?
  revenus      Float?    @default(0)
  documents    String?   // JSON string (legacy - à migrer vers Document)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  contrats     ContratLocataire[]
  garants      LocataireGarant[]
  documentsFiles Document[] @relation("LocataireDocuments")

  @@map("locataires")
}

model Garant {
  id           String       @id @default(cuid())
  civilite     String       @default("M")
  nom          String
  prenom       String
  email        String
  telephone    String
  adresse      String?
  ville        String?
  codePostal   String?
  profession   String?
  revenus      Float?       @default(0)
  typeGarantie String       @default("PHYSIQUE")
  documents    String?      // JSON string (legacy - à migrer vers Document)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  locataires   LocataireGarant[]
  documentsFiles Document[] @relation("GarantDocuments")

  @@map("garants")
}

model LocataireGarant {
  id          String @id @default(cuid())
  locataireId String
  garantId    String

  // Relations
  locataire   Locataire @relation(fields: [locataireId], references: [id], onDelete: Cascade)
  garant      Garant    @relation(fields: [garantId], references: [id], onDelete: Cascade)

  @@unique([locataireId, garantId])
  @@map("locataire_garants")
}

model Contrat {
  id                    String        @id @default(cuid())
  bienId                String
  dateDebut             DateTime
  dateFin               DateTime?
  duree                 Int           @default(12) // en mois
  loyer                 Float
  chargesMensuelles     Float         @default(0)
  depotGarantie         Float         @default(0)
  jourPaiement          Int           @default(1)
  fraisNotaire          Float         @default(0)
  fraisHuissier         Float         @default(0)
  type                  String        @default("HABITATION")
  statut                String        @default("ACTIF")
  clausesParticulieres  String?
  documents             String?       // JSON string (legacy - à migrer vers Document)
  commentaires          String?       // Notes importantes: résiliation, caution, travaux, etc.
  
  // État des lieux
  dateEtatLieux         DateTime?     // Date de l'état des lieux
  heureEtatLieux        String?       // Heure de l'état des lieux (format HH:MM)
  
  // Mode de paiement
  modePaiement          String        @default("VIREMENT") // CAF, VIREMENT, CHEQUE
  
  // Champs pour résiliation anticipée
  dateFinReelle         DateTime?     // Date de fin effective si résiliation anticipée
  raisonResiliation     String?       // Raison de la résiliation
  dateDemandeResiliation DateTime?    // Date de la demande de résiliation
  preavisRespect        Boolean       @default(true) // Si le préavis a été respecté
  commentairesResiliation String?     // Commentaires sur la résiliation
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  bien                  Bien                @relation(fields: [bienId], references: [id], onDelete: Cascade)
  locataires            ContratLocataire[]
  loyers                Loyer[]
  historique            ContratHistorique[]
  documentsFiles        Document[] @relation("ContratDocuments")

  @@map("contrats")
}

model ContratLocataire {
  id          String @id @default(cuid())
  contratId   String
  locataireId String

  // Relations
  contrat     Contrat   @relation(fields: [contratId], references: [id], onDelete: Cascade)
  locataire   Locataire @relation(fields: [locataireId], references: [id], onDelete: Cascade)

  @@unique([contratId, locataireId])
  @@map("contrat_locataires")
}

model ContratHistorique {
  id          String               @id @default(cuid())
  contratId   String
  action      String
  description String
  dateAction  DateTime             @default(now())
  metadata    String?              // JSON pour données supplémentaires

  // Relations
  contrat     Contrat @relation(fields: [contratId], references: [id], onDelete: Cascade)

  @@map("contrat_historique")
}

model Loyer {
  id            String      @id @default(cuid())
  contratId     String
  mois          Int         // 1-12
  annee         Int
  montantDu     Float
  montantPaye   Float       @default(0)
  statut        String      @default("EN_ATTENTE")
  dateEcheance  DateTime
  commentaires  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  contrat       Contrat     @relation(fields: [contratId], references: [id], onDelete: Cascade)
  paiements     Paiement[]
  quittances    Quittance[]
  rappels       Rappel[]

  @@unique([contratId, mois, annee])
  @@map("loyers")
}

model Paiement {
  id          String      @id @default(cuid())
  loyerId     String
  montant     Float
  date        DateTime
  mode        String      @default("VIREMENT")
  payeur      String      @default("Locataire")
  reference   String?
  commentaire String?
  createdAt   DateTime    @default(now())

  // Relations
  loyer       Loyer @relation(fields: [loyerId], references: [id], onDelete: Cascade)

  @@map("paiements")
}

model Quittance {
  id              String        @id @default(cuid())
  loyerId         String
  periode         String        // "Janvier 2024"
  montant         Float
  dateGeneration  DateTime      @default(now())
  dateEnvoi       DateTime?
  modeEnvoi       String        @default("EMAIL")
  statut          String        @default("GENEREE")
  pdfPath         String?
  emailEnvoye     Boolean       @default(false)
  createdAt       DateTime      @default(now())

  // Relations
  loyer           Loyer @relation(fields: [loyerId], references: [id], onDelete: Cascade)

  @@map("quittances")
}

model Rappel {
  id                   String      @id @default(cuid())
  loyerId              String
  type                 String      // Type de rappel: RETARD, RELANCE, MISE_EN_DEMEURE, etc.
  destinataires        String      // Adresses email séparées par des virgules
  message              String      // Contenu du message de rappel
  dateEnvoi            DateTime    @default(now())
  dateEnvoiEffective   DateTime?   // Date d'envoi effectif
  modeEnvoi            String      @default("EMAIL") // EMAIL, COURRIER, SMS, etc.
  envoye               Boolean     @default(false)
  commentaires         String?     // Commentaires sur l'envoi
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  // Relations
  loyer                Loyer @relation(fields: [loyerId], references: [id], onDelete: Cascade)

  @@map("rappels")
}

model Charge {
  id            String          @id @default(cuid())
  bienId        String
  categorie     String          @default("TRAVAUX")
  description   String
  montant       Float
  date          DateTime
  type          String          @default("PONCTUELLE")
  frequence     String?
  dateDebut     DateTime?
  dateFin       DateTime?
  facture       String?         // URL du fichier
  payee         Boolean         @default(false)
  commentaires  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  bien          Bien @relation(fields: [bienId], references: [id], onDelete: Cascade)

  @@map("charges")
}

model Lot {
  id          String  @id @default(cuid())
  bienId      String
  numero      String
  description String?
  surface     Float?
  usage       String? // "habitation", "parking", "cave"

  // Relations
  bien        Bien @relation(fields: [bienId], references: [id], onDelete: Cascade)

  @@map("lots")
}

model Settings {
  id      String @id @default(cuid())
  key     String @unique
  value   String
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model EmailConfig {
  id          String   @id @default(cuid())
  nom         String
  fournisseur String   // GMAIL, ORANGE, OUTLOOK, YAHOO, CUSTOM
  email       String   @unique
  motDePasse  String
  serveurSMTP String
  portSMTP    Int
  securite    String   // TLS, SSL, NONE
  actif       Boolean  @default(true)
  parDefaut   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_configs")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  nom       String
  sujet     String
  contenu   String   // HTML content
  type      String   // RETARD, RELANCE, MISE_EN_DEMEURE, INFORMATION, QUITTANCE, BIENVENUE, CUSTOM
  variables String?  // JSON array of available variables
  actif     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

model Document {
  id          String   @id @default(cuid())
  nom         String   // Nom original du fichier
  nomFichier  String   // Nom du fichier sur le serveur
  chemin      String   // Chemin complet du fichier
  taille      Int      // Taille en bytes
  type        String   // Type MIME
  extension   String   // Extension du fichier
  
  // Classification du document
  categorie   String   // CONTRAT, LOCATAIRE, GARANT, BIEN
  typeDoc     String   // BAIL, ETAT_LIEUX_ENTREE, ETAT_LIEUX_SORTIE, FICHE_PAIE, CNI, PHOTO, etc.
  
  // Relations (optionnelles selon le type)
  contratId   String?
  locataireId String?
  garantId    String?
  bienId      String?
  
  description String?  // Description/commentaire
  dateUpload  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  contrat     Contrat?   @relation("ContratDocuments", fields: [contratId], references: [id], onDelete: Cascade)
  locataire   Locataire? @relation("LocataireDocuments", fields: [locataireId], references: [id], onDelete: Cascade)
  garant      Garant?    @relation("GarantDocuments", fields: [garantId], references: [id], onDelete: Cascade)
  bien        Bien?      @relation("BienDocuments", fields: [bienId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model PretImmobilier {
  id                String   @id @default(cuid())
  bienId            String   // Bien auquel le prêt est rattaché
  
  // Informations générales du prêt
  nom               String   // Nom/description du prêt (ex: "Prêt acquisition 26 rue du moulin")
  banque            String   // Nom de la banque
  numeroPret        String?  // Numéro du prêt
  montantEmprunte   Float    // Montant initial emprunté
  tauxInteret       Float    // Taux d'intérêt annuel (ex: 1.55)
  dureeAnnees       Int      // Durée en années (ex: 20)
  dateDebut         DateTime // Date de début du prêt
  dateFin           DateTime // Date de fin prévue du prêt
  mensualiteBase    Float    // Mensualité de base (sans assurance)
  mensualiteAssurance Float @default(0) // Part assurance mensuelle
  
  // Statut et métadonnées
  statut            String   @default("ACTIF") // ACTIF, SOLDE, SUSPENDU
  fichierOriginal   String?  // Nom du fichier XLS importé
  dateImport        DateTime @default(now())
  commentaires      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  bien              Bien     @relation(fields: [bienId], references: [id], onDelete: Cascade)
  echeances         EcheancePret[]

  @@map("prets_immobiliers")
}

model EcheancePret {
  id                String   @id @default(cuid())
  pretId            String   // Prêt auquel appartient cette échéance
  
  // Données de l'échéance (issues du tableau XLS)
  rang              Int      // Numéro de l'échéance (1, 2, 3...)
  dateEcheance      DateTime // Date d'échéance
  montantRecouvrer  Float    // Montant total à recouvrer
  capitalAmorti     Float    // Capital amorti dans cette échéance
  partInterets      Float    // Part des intérêts
  partAccessoires   Float    // Part accessoires (assurance)
  capitalRestant    Float    // Capital restant dû après cette échéance
  
  // Métadonnées
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  pret              PretImmobilier @relation(fields: [pretId], references: [id], onDelete: Cascade)

  @@unique([pretId, rang]) // Une seule échéance par rang pour un prêt
  @@map("echeances_prets")
}