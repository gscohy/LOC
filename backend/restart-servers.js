import { PrismaClient } from '@prisma/client';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function restartServers() {
  try {
    console.log('üîÑ Red√©marrage complet des serveurs...');
    
    // 1. D√©connecter proprement Prisma
    console.log('1Ô∏è‚É£ D√©connexion Prisma...');
    const prisma = new PrismaClient();
    await prisma.$disconnect();
    console.log('   ‚úÖ Prisma d√©connect√©');
    
    // 2. Tuer tous les processus Node
    console.log('2Ô∏è‚É£ Arr√™t des processus existants...');
    try {
      await execAsync('taskkill /f /im node.exe');
      console.log('   ‚úÖ Processus Node arr√™t√©s');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Aucun processus Node √† arr√™ter');
    }
    
    try {
      await execAsync('taskkill /f /im tsx.exe');
      console.log('   ‚úÖ Processus TSX arr√™t√©s');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Aucun processus TSX √† arr√™ter');
    }
    
    // 3. Nettoyer le cache Prisma
    console.log('3Ô∏è‚É£ Nettoyage cache Prisma...');
    try {
      await execAsync('rmdir /s /q node_modules\\.prisma');
      console.log('   ‚úÖ Cache Prisma supprim√©');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Cache d√©j√† propre');
    }
    
    // 4. R√©g√©n√©rer Prisma
    console.log('4Ô∏è‚É£ G√©n√©ration nouveau client Prisma...');
    await execAsync('npm run db:generate');
    console.log('   ‚úÖ Client Prisma r√©g√©n√©r√©');
    
    console.log('\\nüéâ Red√©marrage termin√© !');
    console.log('\\nüìù Actions √† faire manuellement:');
    console.log('   1. Dans un terminal backend: npm run dev');
    console.log('   2. Dans un terminal frontend: npm run dev');
    console.log('   3. Tester: http://localhost:5173/locataires/cmdt7nkiz00ygyuxgvfkplwv6');
    
  } catch (error) {
    console.error('üí• Erreur:', error.message);
  }
}

restartServers();